/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
    admins: AdminAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    admins: Admin;
    media: Media;
    packages: Package;
    counters: Counter;
    'client-imports': ClientImport;
    settings: Setting;
    microfinances: Microfinance;
    agencies: Agency;
    memberships: Membership;
    clients: Client;
    'commission-configs': CommissionConfig;
    'operation-sessions': OperationSession;
    'api-keys': ApiKey;
    subscriptions: Subscription;
    'client-collections': ClientCollection;
    'daily-settlements': DailySettlement;
    'withdrawal-requests': WithdrawalRequest;
    commissions: Commission;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    admins: AdminsSelect<false> | AdminsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    packages: PackagesSelect<false> | PackagesSelect<true>;
    counters: CountersSelect<false> | CountersSelect<true>;
    'client-imports': ClientImportsSelect<false> | ClientImportsSelect<true>;
    settings: SettingsSelect<false> | SettingsSelect<true>;
    microfinances: MicrofinancesSelect<false> | MicrofinancesSelect<true>;
    agencies: AgenciesSelect<false> | AgenciesSelect<true>;
    memberships: MembershipsSelect<false> | MembershipsSelect<true>;
    clients: ClientsSelect<false> | ClientsSelect<true>;
    'commission-configs': CommissionConfigsSelect<false> | CommissionConfigsSelect<true>;
    'operation-sessions': OperationSessionsSelect<false> | OperationSessionsSelect<true>;
    'api-keys': ApiKeysSelect<false> | ApiKeysSelect<true>;
    subscriptions: SubscriptionsSelect<false> | SubscriptionsSelect<true>;
    'client-collections': ClientCollectionsSelect<false> | ClientCollectionsSelect<true>;
    'daily-settlements': DailySettlementsSelect<false> | DailySettlementsSelect<true>;
    'withdrawal-requests': WithdrawalRequestsSelect<false> | WithdrawalRequestsSelect<true>;
    commissions: CommissionsSelect<false> | CommissionsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    contacts: Contact;
  };
  globalsSelect: {
    contacts: ContactsSelect<false> | ContactsSelect<true>;
  };
  locale: null;
  user:
    | (User & {
        collection: 'users';
      })
    | (Admin & {
        collection: 'admins';
      });
  jobs: {
    tasks: {
      expireSubscriptions: TaskExpireSubscriptions;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
export interface AdminAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  phone?: string | null;
  code?: string | null;
  status?: ('active' | 'disabled') | null;
  avatar?: (number | null) | Media;
  lastLoginAt?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  _verified?: boolean | null;
  _verificationToken?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins".
 */
export interface Admin {
  id: string;
  name?: string | null;
  avatar?: (number | null) | Media;
  lastLoginAt?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages".
 */
export interface Package {
  id: string;
  name: string;
  price: number;
  clientsCount: number;
  agentsCount: number;
  adminsCount: number;
  agenciesCount: number;
  agentLocalization?: boolean | null;
  enableCommision?: boolean | null;
  smsCount: number;
  supervisorsCount: number;
  cashiersCount?: number | null;
  supportType?: ('standard' | '24/7' | 'premium') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "counters".
 */
export interface Counter {
  id: string;
  name: string;
  value: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "client-imports".
 */
export interface ClientImport {
  id: string;
  microfinance?: (string | null) | Microfinance;
  method?: ('import' | 'manual' | 'api') | null;
  totalClients?: number | null;
  successfulTotal?: number | null;
  collections?: (string | ClientCollection)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "microfinances".
 */
export interface Microfinance {
  /**
   * Unique identifier for URLs
   */
  slug?: string | null;
  slugLock?: boolean | null;
  id: string;
  name: string;
  email: string;
  phone?: string | null;
  address?: string | null;
  country?: string | null;
  currency?: ('XAF' | 'USD' | 'EUR' | 'NGN' | 'KES') | null;
  logo?: (number | null) | Media;
  owner?: (string | null) | User;
  status?: ('active' | 'waiting' | 'suspended') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "client-collections".
 */
export interface ClientCollection {
  id: string;
  microfinance?: (string | null) | Microfinance;
  membership?: (string | null) | Membership;
  transactionNumber?: string | null;
  agency?: (string | null) | Agency;
  type: 'deposit' | 'withdrawal';
  amount: number;
  currency?: ('XAF' | 'USD' | 'EUR' | 'NGN' | 'KES') | null;
  withdrawalSource?: (string | null) | WithdrawalRequest;
  latitude?: number | null;
  longitude?: number | null;
  address?: string | null;
  signature?: string | null;
  clientReference?: string | null;
  date?: string | null;
  reversedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "memberships".
 */
export interface Membership {
  id: string;
  microfinance?: (string | null) | Microfinance;
  user?: (string | null) | User;
  name?: string | null;
  email?: string | null;
  agency?: (string | null) | Agency;
  invitedAt?: string | null;
  invitationToken?: string | null;
  invitationExpiresAt?: string | null;
  role?: ('admin' | 'agent' | 'user' | 'cashier' | 'coordinator') | null;
  status?: ('active' | 'waiting' | 'suspended') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agencies".
 */
export interface Agency {
  id: string;
  microfinance: string | Microfinance;
  name?: string | null;
  email: string;
  country?: string | null;
  city?: string | null;
  address?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "withdrawal-requests".
 */
export interface WithdrawalRequest {
  id: string;
  microfinance?: (string | null) | Microfinance;
  membership?: (string | null) | Membership;
  agency?: (string | null) | Agency;
  client: string | Client;
  amount: number;
  date?: string | null;
  reason?: string | null;
  signature?: string | null;
  photo?: (number | null) | Media;
  status: 'pending' | 'approved' | 'rejected';
  approvedBy?: (string | null) | Membership;
  approvedAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clients".
 */
export interface Client {
  id: string;
  microfinance: string | Microfinance;
  user?: (string | null) | User;
  membership?: (string | null) | Membership;
  agency?: (string | null) | Agency;
  photo?: (number | null) | Media;
  firstName: string;
  lastName: string;
  reference?: string | null;
  phone?: string | null;
  email?: string | null;
  address?: string | null;
  nationalID?: string | null;
  balance?: number | null;
  accountNumber?: string | null;
  status?: ('active' | 'waiting' | 'inactive' | 'blacklisted') | null;
  collections?: (string | ClientCollection)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  microfinance: string | Microfinance;
  agency?: (string | null) | Agency;
  maxCollectionAmount: number;
  maxTimeBetweenDeposits: number;
  notifySupervisorsOnLimit?: boolean | null;
  applyLimitToAllAgents?: boolean | null;
  updatedBy?: (string | null) | User;
  allowWithdrawalToAgents?: boolean | null;
  allowHistoryToClients?: boolean | null;
  enableCommision?: boolean | null;
  commissionPercentage?: number | null;
  msCommissionPercentage?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "commission-configs".
 */
export interface CommissionConfig {
  id: string;
  microfinance: string | Microfinance;
  membership?: (string | null) | Membership;
  agency?: (string | null) | Agency;
  isEnable: boolean;
  commissionPercentage: number;
  msCommissionPercentage?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "operation-sessions".
 */
export interface OperationSession {
  id: string;
  microfinance: string | Microfinance;
  createdBy: string | Membership;
  agency?: (string | null) | Agency;
  closedAt?: string | null;
  status: 'open' | 'closed';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "api-keys".
 */
export interface ApiKey {
  microfinance: string | Microfinance;
  id: string;
  name: string;
  key?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions".
 */
export interface Subscription {
  id: string;
  microfinance?: (string | null) | Microfinance;
  package: string | Package;
  startDate?: string | null;
  durationInMonths: number;
  sentSmsCount?: number | null;
  endDate?: string | null;
  status?: ('active' | 'expired' | 'cancelled') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "daily-settlements".
 */
export interface DailySettlement {
  id: string;
  transactionNumber?: string | null;
  microfinance: string | Microfinance;
  membership: string | Membership;
  agency?: (string | null) | Agency;
  date?: string | null;
  totalCollected: number;
  totalDeposit: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "commissions".
 */
export interface Commission {
  id: string;
  microfinance: string | Microfinance;
  membership?: (string | null) | Membership;
  agency?: (string | null) | Agency;
  month: string;
  commissions: {
    commissionConfigId: string;
    clientCollectionId: string;
    commisionPercentage: number;
    msCommissionPercentage: number;
    transactionAmount: number;
    commissionAmount: number;
    date: string;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'expireSubscriptions';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'expireSubscriptions') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'admins';
        value: string | Admin;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'packages';
        value: string | Package;
      } | null)
    | ({
        relationTo: 'counters';
        value: string | Counter;
      } | null)
    | ({
        relationTo: 'client-imports';
        value: string | ClientImport;
      } | null)
    | ({
        relationTo: 'settings';
        value: string | Setting;
      } | null)
    | ({
        relationTo: 'microfinances';
        value: string | Microfinance;
      } | null)
    | ({
        relationTo: 'agencies';
        value: string | Agency;
      } | null)
    | ({
        relationTo: 'memberships';
        value: string | Membership;
      } | null)
    | ({
        relationTo: 'clients';
        value: string | Client;
      } | null)
    | ({
        relationTo: 'commission-configs';
        value: string | CommissionConfig;
      } | null)
    | ({
        relationTo: 'operation-sessions';
        value: string | OperationSession;
      } | null)
    | ({
        relationTo: 'api-keys';
        value: string | ApiKey;
      } | null)
    | ({
        relationTo: 'subscriptions';
        value: string | Subscription;
      } | null)
    | ({
        relationTo: 'client-collections';
        value: string | ClientCollection;
      } | null)
    | ({
        relationTo: 'daily-settlements';
        value: string | DailySettlement;
      } | null)
    | ({
        relationTo: 'withdrawal-requests';
        value: string | WithdrawalRequest;
      } | null)
    | ({
        relationTo: 'commissions';
        value: string | Commission;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'admins';
        value: string | Admin;
      };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user:
    | {
        relationTo: 'users';
        value: string | User;
      }
    | {
        relationTo: 'admins';
        value: string | Admin;
      };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  phone?: T;
  code?: T;
  status?: T;
  avatar?: T;
  lastLoginAt?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  _verified?: T;
  _verificationToken?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "admins_select".
 */
export interface AdminsSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  avatar?: T;
  lastLoginAt?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "packages_select".
 */
export interface PackagesSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  price?: T;
  clientsCount?: T;
  agentsCount?: T;
  adminsCount?: T;
  agenciesCount?: T;
  agentLocalization?: T;
  enableCommision?: T;
  smsCount?: T;
  supervisorsCount?: T;
  cashiersCount?: T;
  supportType?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "counters_select".
 */
export interface CountersSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "client-imports_select".
 */
export interface ClientImportsSelect<T extends boolean = true> {
  id?: T;
  microfinance?: T;
  method?: T;
  totalClients?: T;
  successfulTotal?: T;
  collections?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  id?: T;
  microfinance?: T;
  agency?: T;
  maxCollectionAmount?: T;
  maxTimeBetweenDeposits?: T;
  notifySupervisorsOnLimit?: T;
  applyLimitToAllAgents?: T;
  updatedBy?: T;
  allowWithdrawalToAgents?: T;
  allowHistoryToClients?: T;
  enableCommision?: T;
  commissionPercentage?: T;
  msCommissionPercentage?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "microfinances_select".
 */
export interface MicrofinancesSelect<T extends boolean = true> {
  slug?: T;
  slugLock?: T;
  id?: T;
  name?: T;
  email?: T;
  phone?: T;
  address?: T;
  country?: T;
  currency?: T;
  logo?: T;
  owner?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "agencies_select".
 */
export interface AgenciesSelect<T extends boolean = true> {
  id?: T;
  microfinance?: T;
  name?: T;
  email?: T;
  country?: T;
  city?: T;
  address?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "memberships_select".
 */
export interface MembershipsSelect<T extends boolean = true> {
  id?: T;
  microfinance?: T;
  user?: T;
  name?: T;
  email?: T;
  agency?: T;
  invitedAt?: T;
  invitationToken?: T;
  invitationExpiresAt?: T;
  role?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clients_select".
 */
export interface ClientsSelect<T extends boolean = true> {
  id?: T;
  microfinance?: T;
  user?: T;
  membership?: T;
  agency?: T;
  photo?: T;
  firstName?: T;
  lastName?: T;
  reference?: T;
  phone?: T;
  email?: T;
  address?: T;
  nationalID?: T;
  balance?: T;
  accountNumber?: T;
  status?: T;
  collections?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "commission-configs_select".
 */
export interface CommissionConfigsSelect<T extends boolean = true> {
  id?: T;
  microfinance?: T;
  membership?: T;
  agency?: T;
  isEnable?: T;
  commissionPercentage?: T;
  msCommissionPercentage?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "operation-sessions_select".
 */
export interface OperationSessionsSelect<T extends boolean = true> {
  id?: T;
  microfinance?: T;
  createdBy?: T;
  agency?: T;
  closedAt?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "api-keys_select".
 */
export interface ApiKeysSelect<T extends boolean = true> {
  microfinance?: T;
  id?: T;
  name?: T;
  key?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "subscriptions_select".
 */
export interface SubscriptionsSelect<T extends boolean = true> {
  id?: T;
  microfinance?: T;
  package?: T;
  startDate?: T;
  durationInMonths?: T;
  sentSmsCount?: T;
  endDate?: T;
  status?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "client-collections_select".
 */
export interface ClientCollectionsSelect<T extends boolean = true> {
  id?: T;
  microfinance?: T;
  membership?: T;
  transactionNumber?: T;
  agency?: T;
  type?: T;
  amount?: T;
  currency?: T;
  withdrawalSource?: T;
  latitude?: T;
  longitude?: T;
  address?: T;
  signature?: T;
  clientReference?: T;
  date?: T;
  reversedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "daily-settlements_select".
 */
export interface DailySettlementsSelect<T extends boolean = true> {
  id?: T;
  transactionNumber?: T;
  microfinance?: T;
  membership?: T;
  agency?: T;
  date?: T;
  totalCollected?: T;
  totalDeposit?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "withdrawal-requests_select".
 */
export interface WithdrawalRequestsSelect<T extends boolean = true> {
  id?: T;
  microfinance?: T;
  membership?: T;
  agency?: T;
  client?: T;
  amount?: T;
  date?: T;
  reason?: T;
  signature?: T;
  photo?: T;
  status?: T;
  approvedBy?: T;
  approvedAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "commissions_select".
 */
export interface CommissionsSelect<T extends boolean = true> {
  id?: T;
  microfinance?: T;
  membership?: T;
  agency?: T;
  month?: T;
  commissions?:
    | T
    | {
        commissionConfigId?: T;
        clientCollectionId?: T;
        commisionPercentage?: T;
        msCommissionPercentage?: T;
        transactionAmount?: T;
        commissionAmount?: T;
        date?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contacts".
 */
export interface Contact {
  id: number;
  address?: string | null;
  phone?: string | null;
  phone2?: string | null;
  contactEmail?: string | null;
  supportEmail?: string | null;
  facebook?: string | null;
  twitter?: string | null;
  instagram?: string | null;
  linkedin?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contacts_select".
 */
export interface ContactsSelect<T extends boolean = true> {
  address?: T;
  phone?: T;
  phone2?: T;
  contactEmail?: T;
  supportEmail?: T;
  facebook?: T;
  twitter?: T;
  instagram?: T;
  linkedin?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskExpireSubscriptions".
 */
export interface TaskExpireSubscriptions {
  input?: unknown;
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}